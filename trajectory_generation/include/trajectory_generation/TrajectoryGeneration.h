/* Auto-generated by genmsg_cpp for file /home/amsl/AMSL_ros_pkg/rwrc16/trajectory_generation/srv/TrajectoryGeneration.srv */
#ifndef TRAJECTORY_GENERATION_SERVICE_TRAJECTORYGENERATION_H
#define TRAJECTORY_GENERATION_SERVICE_TRAJECTORYGENERATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/PoseStamped.h"
#include "geometry_msgs/PoseStamped.h"
#include "trajectory_generation/path_params.h"


#include "nav_msgs/Path.h"
#include "trajectory_generation/path_params.h"
#include "trajectory_generation/VelocityArray.h"

namespace trajectory_generation
{
template <class ContainerAllocator>
struct TrajectoryGenerationRequest_ {
  typedef TrajectoryGenerationRequest_<ContainerAllocator> Type;

  TrajectoryGenerationRequest_()
  : header()
  , fin(false)
  , teledrive(false)
  , mode(0)
  , start()
  , goal()
  , params()
  , r(0.0)
  {
  }

  TrajectoryGenerationRequest_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , fin(false)
  , teledrive(false)
  , mode(0)
  , start(_alloc)
  , goal(_alloc)
  , params(_alloc)
  , r(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _fin_type;
  uint8_t fin;

  typedef uint8_t _teledrive_type;
  uint8_t teledrive;

  typedef uint8_t _mode_type;
  uint8_t mode;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _start_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  start;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  goal;

  typedef  ::trajectory_generation::path_params_<ContainerAllocator>  _params_type;
   ::trajectory_generation::path_params_<ContainerAllocator>  params;

  typedef float _r_type;
  float r;


  typedef boost::shared_ptr< ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct TrajectoryGenerationRequest
typedef  ::trajectory_generation::TrajectoryGenerationRequest_<std::allocator<void> > TrajectoryGenerationRequest;

typedef boost::shared_ptr< ::trajectory_generation::TrajectoryGenerationRequest> TrajectoryGenerationRequestPtr;
typedef boost::shared_ptr< ::trajectory_generation::TrajectoryGenerationRequest const> TrajectoryGenerationRequestConstPtr;



template <class ContainerAllocator>
struct TrajectoryGenerationResponse_ {
  typedef TrajectoryGenerationResponse_<ContainerAllocator> Type;

  TrajectoryGenerationResponse_()
  : path()
  , params()
  , v_array()
  , tolerance(0.0)
  {
  }

  TrajectoryGenerationResponse_(const ContainerAllocator& _alloc)
  : path(_alloc)
  , params(_alloc)
  , v_array(_alloc)
  , tolerance(0.0)
  {
  }

  typedef  ::nav_msgs::Path_<ContainerAllocator>  _path_type;
   ::nav_msgs::Path_<ContainerAllocator>  path;

  typedef  ::trajectory_generation::path_params_<ContainerAllocator>  _params_type;
   ::trajectory_generation::path_params_<ContainerAllocator>  params;

  typedef  ::trajectory_generation::VelocityArray_<ContainerAllocator>  _v_array_type;
   ::trajectory_generation::VelocityArray_<ContainerAllocator>  v_array;

  typedef float _tolerance_type;
  float tolerance;


  typedef boost::shared_ptr< ::trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct TrajectoryGenerationResponse
typedef  ::trajectory_generation::TrajectoryGenerationResponse_<std::allocator<void> > TrajectoryGenerationResponse;

typedef boost::shared_ptr< ::trajectory_generation::TrajectoryGenerationResponse> TrajectoryGenerationResponsePtr;
typedef boost::shared_ptr< ::trajectory_generation::TrajectoryGenerationResponse const> TrajectoryGenerationResponseConstPtr;


struct TrajectoryGeneration
{

typedef TrajectoryGenerationRequest Request;
typedef TrajectoryGenerationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct TrajectoryGeneration
} // namespace trajectory_generation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f6de538e1db652683d258cb48415b230";
  }

  static const char* value(const  ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf6de538e1db65268ULL;
  static const uint64_t static_value2 = 0x3d258cb48415b230ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/TrajectoryGenerationRequest";
  }

  static const char* value(const  ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
bool fin\n\
bool teledrive\n\
char mode\n\
geometry_msgs/PoseStamped start\n\
geometry_msgs/PoseStamped goal\n\
trajectory_generation/path_params params\n\
float32 r\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: trajectory_generation/path_params\n\
Header header\n\
float32 k0\n\
float32 k1\n\
float32 kf\n\
float32 sf\n\
float32 v0\n\
float32 a0\n\
float32 vt\n\
float32 af\n\
float32 vf\n\
float32 dt\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ccc2b3cf0f368093e8d406c156e51eb3";
  }

  static const char* value(const  ::trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xccc2b3cf0f368093ULL;
  static const uint64_t static_value2 = 0xe8d406c156e51eb3ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/TrajectoryGenerationResponse";
  }

  static const char* value(const  ::trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nav_msgs/Path path\n\
trajectory_generation/path_params params\n\
trajectory_generation/VelocityArray v_array\n\
float32 tolerance\n\
\n\
\n\
================================================================================\n\
MSG: nav_msgs/Path\n\
#An array of poses that represents a Path for a robot to follow\n\
Header header\n\
geometry_msgs/PoseStamped[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: trajectory_generation/path_params\n\
Header header\n\
float32 k0\n\
float32 k1\n\
float32 kf\n\
float32 sf\n\
float32 v0\n\
float32 a0\n\
float32 vt\n\
float32 af\n\
float32 vf\n\
float32 dt\n\
\n\
\n\
\n\
================================================================================\n\
MSG: trajectory_generation/VelocityArray\n\
Header header\n\
\n\
Velocity[] vel\n\
bool steer_init\n\
int64 id_num\n\
\n\
================================================================================\n\
MSG: trajectory_generation/Velocity\n\
Header header\n\
\n\
float32 op_linear\n\
float32 op_angular\n\
int32 id\n\
\n\
";
  }

  static const char* value(const  ::trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.fin);
    stream.next(m.teledrive);
    stream.next(m.mode);
    stream.next(m.start);
    stream.next(m.goal);
    stream.next(m.params);
    stream.next(m.r);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrajectoryGenerationRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.path);
    stream.next(m.params);
    stream.next(m.v_array);
    stream.next(m.tolerance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrajectoryGenerationResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<trajectory_generation::TrajectoryGeneration> {
  static const char* value() 
  {
    return "d64a45b931d2b39bcd5b7f6180aad5d1";
  }

  static const char* value(const trajectory_generation::TrajectoryGeneration&) { return value(); } 
};

template<>
struct DataType<trajectory_generation::TrajectoryGeneration> {
  static const char* value() 
  {
    return "trajectory_generation/TrajectoryGeneration";
  }

  static const char* value(const trajectory_generation::TrajectoryGeneration&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d64a45b931d2b39bcd5b7f6180aad5d1";
  }

  static const char* value(const trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/TrajectoryGeneration";
  }

  static const char* value(const trajectory_generation::TrajectoryGenerationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d64a45b931d2b39bcd5b7f6180aad5d1";
  }

  static const char* value(const trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/TrajectoryGeneration";
  }

  static const char* value(const trajectory_generation::TrajectoryGenerationResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TRAJECTORY_GENERATION_SERVICE_TRAJECTORYGENERATION_H

