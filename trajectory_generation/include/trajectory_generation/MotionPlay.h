/* Auto-generated by genmsg_cpp for file /home/amsl/AMSL_ros_pkg/rwrc16/trajectory_generation/srv/MotionPlay.srv */
#ifndef TRAJECTORY_GENERATION_SERVICE_MOTIONPLAY_H
#define TRAJECTORY_GENERATION_SERVICE_MOTIONPLAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Header.h"
#include "nav_msgs/Path.h"
#include "trajectory_generation/path_params.h"
#include "trajectory_generation/VelocityArray.h"



namespace trajectory_generation
{
template <class ContainerAllocator>
struct MotionPlayRequest_ {
  typedef MotionPlayRequest_<ContainerAllocator> Type;

  MotionPlayRequest_()
  : header()
  , path()
  , params()
  , v_array()
  , tolerance(0.0)
  {
  }

  MotionPlayRequest_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , path(_alloc)
  , params(_alloc)
  , v_array(_alloc)
  , tolerance(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::nav_msgs::Path_<ContainerAllocator>  _path_type;
   ::nav_msgs::Path_<ContainerAllocator>  path;

  typedef  ::trajectory_generation::path_params_<ContainerAllocator>  _params_type;
   ::trajectory_generation::path_params_<ContainerAllocator>  params;

  typedef  ::trajectory_generation::VelocityArray_<ContainerAllocator>  _v_array_type;
   ::trajectory_generation::VelocityArray_<ContainerAllocator>  v_array;

  typedef float _tolerance_type;
  float tolerance;


  typedef boost::shared_ptr< ::trajectory_generation::MotionPlayRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajectory_generation::MotionPlayRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct MotionPlayRequest
typedef  ::trajectory_generation::MotionPlayRequest_<std::allocator<void> > MotionPlayRequest;

typedef boost::shared_ptr< ::trajectory_generation::MotionPlayRequest> MotionPlayRequestPtr;
typedef boost::shared_ptr< ::trajectory_generation::MotionPlayRequest const> MotionPlayRequestConstPtr;



template <class ContainerAllocator>
struct MotionPlayResponse_ {
  typedef MotionPlayResponse_<ContainerAllocator> Type;

  MotionPlayResponse_()
  : flag(false)
  {
  }

  MotionPlayResponse_(const ContainerAllocator& _alloc)
  : flag(false)
  {
  }

  typedef uint8_t _flag_type;
  uint8_t flag;


  typedef boost::shared_ptr< ::trajectory_generation::MotionPlayResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trajectory_generation::MotionPlayResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct MotionPlayResponse
typedef  ::trajectory_generation::MotionPlayResponse_<std::allocator<void> > MotionPlayResponse;

typedef boost::shared_ptr< ::trajectory_generation::MotionPlayResponse> MotionPlayResponsePtr;
typedef boost::shared_ptr< ::trajectory_generation::MotionPlayResponse const> MotionPlayResponseConstPtr;


struct MotionPlay
{

typedef MotionPlayRequest Request;
typedef MotionPlayResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MotionPlay
} // namespace trajectory_generation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::MotionPlayRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::MotionPlayRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::trajectory_generation::MotionPlayRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6bb4f1adf75a45a8d7f2a900b3ae083c";
  }

  static const char* value(const  ::trajectory_generation::MotionPlayRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6bb4f1adf75a45a8ULL;
  static const uint64_t static_value2 = 0xd7f2a900b3ae083cULL;
};

template<class ContainerAllocator>
struct DataType< ::trajectory_generation::MotionPlayRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/MotionPlayRequest";
  }

  static const char* value(const  ::trajectory_generation::MotionPlayRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::trajectory_generation::MotionPlayRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
nav_msgs/Path path\n\
trajectory_generation/path_params params\n\
trajectory_generation/VelocityArray v_array\n\
float32 tolerance\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: nav_msgs/Path\n\
#An array of poses that represents a Path for a robot to follow\n\
Header header\n\
geometry_msgs/PoseStamped[] poses\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: trajectory_generation/path_params\n\
Header header\n\
float32 k0\n\
float32 k1\n\
float32 kf\n\
float32 sf\n\
float32 v0\n\
float32 a0\n\
float32 vt\n\
float32 af\n\
float32 vf\n\
float32 dt\n\
\n\
\n\
\n\
================================================================================\n\
MSG: trajectory_generation/VelocityArray\n\
Header header\n\
\n\
Velocity[] vel\n\
bool steer_init\n\
int64 id_num\n\
\n\
================================================================================\n\
MSG: trajectory_generation/Velocity\n\
Header header\n\
\n\
float32 op_linear\n\
float32 op_angular\n\
int32 id\n\
\n\
";
  }

  static const char* value(const  ::trajectory_generation::MotionPlayRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::trajectory_generation::MotionPlayRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::trajectory_generation::MotionPlayRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::MotionPlayResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::trajectory_generation::MotionPlayResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::trajectory_generation::MotionPlayResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "24842bc754e0f5cc982338eca1269251";
  }

  static const char* value(const  ::trajectory_generation::MotionPlayResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x24842bc754e0f5ccULL;
  static const uint64_t static_value2 = 0x982338eca1269251ULL;
};

template<class ContainerAllocator>
struct DataType< ::trajectory_generation::MotionPlayResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/MotionPlayResponse";
  }

  static const char* value(const  ::trajectory_generation::MotionPlayResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::trajectory_generation::MotionPlayResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool flag\n\
\n\
\n\
";
  }

  static const char* value(const  ::trajectory_generation::MotionPlayResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::trajectory_generation::MotionPlayResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::trajectory_generation::MotionPlayRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.path);
    stream.next(m.params);
    stream.next(m.v_array);
    stream.next(m.tolerance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MotionPlayRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::trajectory_generation::MotionPlayResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.flag);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MotionPlayResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<trajectory_generation::MotionPlay> {
  static const char* value() 
  {
    return "053a68d067e1f26e5b6364c0c42b7226";
  }

  static const char* value(const trajectory_generation::MotionPlay&) { return value(); } 
};

template<>
struct DataType<trajectory_generation::MotionPlay> {
  static const char* value() 
  {
    return "trajectory_generation/MotionPlay";
  }

  static const char* value(const trajectory_generation::MotionPlay&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<trajectory_generation::MotionPlayRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "053a68d067e1f26e5b6364c0c42b7226";
  }

  static const char* value(const trajectory_generation::MotionPlayRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<trajectory_generation::MotionPlayRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/MotionPlay";
  }

  static const char* value(const trajectory_generation::MotionPlayRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<trajectory_generation::MotionPlayResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "053a68d067e1f26e5b6364c0c42b7226";
  }

  static const char* value(const trajectory_generation::MotionPlayResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<trajectory_generation::MotionPlayResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_generation/MotionPlay";
  }

  static const char* value(const trajectory_generation::MotionPlayResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TRAJECTORY_GENERATION_SERVICE_MOTIONPLAY_H

